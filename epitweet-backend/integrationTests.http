@env = dev

# ================== User Service ==================

### 1. Test Create User
POST http://localhost:8081/api/users/create
Content-Type: application/json

{
  "tag": "user1",
  "pseudo": "User One",
  "password": "password123",
  "blockedUsers": []
}

### 2. Test Authenticate User
POST http://localhost:8081/api/users/auth
Content-Type: application/json

{
  "tag": "user1",
  "pseudo": "User One",
  "password": "password123"
}

### 3. Test Get User by Tag
GET http://localhost:8081/api/users/getUser
userTag: user1

### 4. Test Update User
PATCH http://localhost:8081/api/users/update
Content-Type: application/json

{
  "tag": "user1",
  "pseudo": "User One Updated",
  "password": "newpassword123",
  "blockedUsers": []
}

### 5. Test Get User by Tag After Update
GET http://localhost:8081/api/users/getUser
userTag: user1

### 6. Test Delete User
DELETE http://localhost:8081/api/users/delete
userTag: user1

### 7. Test Get User After Delete
GET http://localhost:8081/api/users/getUser
userTag: user1

# ================== Repo Post Service ==================

### Prepare data
POST http://localhost:8081/api/users/create
Content-Type: application/json

{
  "tag": "user2",
  "pseudo": "User Two",
  "password": "password123",
  "blockedUsers": []
}

### Get userId
GET http://localhost:8081/api/users/getUser
userTag:user2

### 8. Test Create Post
POST http://localhost:8082/api/posts/createPost
userId:67dae40c9c38e63a0a5c5992
Content-Type: application/json

{
  "postType": "post",
  "content": "This is my first post!",
  "mediaPath": "https://cdn.example.com/image.jpg"
}

### 9. Test Get Posts by User (replace userId with _id)
GET http://localhost:8082/api/posts/getPosts
userId:67dae40c9c38e63a0a5c5992

### 10. Test Get Post by ID (replace end of url with _id)
GET http://localhost:8082/api/posts/getPost/67e4363af729df6e7fb465b0

### 11. Test Create Repost (replace parentId with _id)
POST http://localhost:8082/api/posts/createPost
userId:67dae40c9c38e63a0a5c5992
Content-Type: application/json

{
  "postType": "repost",
  "content": "This is my second Repost!",
  "parentId": "67e4363af729df6e7fb465b0"
}

### 12. Test Create Reply (replace parentId with _id)
POST http://localhost:8082/api/posts/createPost
userId:67dae40c9c38e63a0a5c5992
Content-Type: application/json

{
  "postType": "reply",
  "content": "This is my first Reply!",
  "parentId": "67e4363af729df6e7fb465b0"
}

### Get reply and post Ids
GET http://localhost:8082/api/posts/getPosts
userId:67dae40c9c38e63a0a5c5992

### 13. Test Get Reply (replace id with _id)
GET http://localhost:8082/api/posts/getPostReply/67de9fce9ead3b458fa2a7af

### 12. Test Delete Post by ID
DELETE http://localhost:8082/api/posts/deletePost/67dae580ecc276377f341e5a

### 13. Test Get Post by userId after delete
GET http://localhost:8082/api/posts/getPosts
userId:67dae40c9c38e63a0a5c5992

# ================== Search Service ==================

### 🔍 1. Create Post with hashtags #dev #java
POST http://localhost:8082/api/posts/createPost
userId: 65fb387a206b9b57f5cbe7bb
Content-Type: application/json

{
  "postType": "post",
  "content": "Je parle de #dev et #java aujourd’hui !",
  "mediaPath": ""
}

### 🔍 2. Create Post with regular words only
POST http://localhost:8082/api/posts/createPost
userId: 65fb387a206b9b57f5cbe7bb
Content-Type: application/json

{
  "postType": "post",
  "content": "Java Quarkus Elasticsearch sont puissants",
  "mediaPath": ""
}

### 🔍 3. Create Post with unrelated content
POST http://localhost:8082/api/posts/createPost
userId: 65fb387a206b9b57f5cbe7bb
Content-Type: application/json

{
  "postType": "post",
  "content": "Rien à voir ici",
  "mediaPath": ""
}

### 🔍 4. Search vague match (regular words only)
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"java elasticsearch"

### 🔍 5. Search strict match (hashtags only, #dev and #java required)
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"#dev #java"

### 🔍 6. Search strict match (hashtags only with one hashtag that does not appear in the tweet)
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"#dev #java #snugus"

### 🔍 7. Search mixed match (word + hashtag)
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"aujourd’hui #java"

### 🚫 8. Hashtag should not match as word
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"java"

### 🚫 9. Word should not match as hashtag
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"#elasticsearch"

### 🗑️ 9. Delete post containing hashtags
# ⚠️ Remplacer l'ID par celui du post à supprimer (récupéré via /getPosts)
DELETE http://localhost:8082/api/posts/deletePost/REPLACE_WITH_POST_ID

### 🚫 10. Re-search after delete
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"#java"

###
# ================== Repo Social Service ==================

### Prepare data: Create user3
POST http://localhost:8081/api/users/create
Content-Type: application/json

{
  "tag": "user3",
  "pseudo": "User Three",
  "password": "password123",
  "blockedUsers": []
}
> {%
    client.global.set("user3Id", response.body._id);
%}

### Prepare data: Create user4
POST http://localhost:8081/api/users/create
Content-Type: application/json

{
  "tag": "user4",
  "pseudo": "User Four",
  "password": "password123",
  "blockedUsers": []
}
> {%
    client.global.set("user4Id", response.body._id);
%}

### Prepare data: Create user5
POST http://localhost:8081/api/users/create
Content-Type: application/json

{
  "tag": "user5",
  "pseudo": "User Five",
  "password": "password123",
  "blockedUsers": []
}
> {%
    client.global.set("user5Id", response.body._id);
%}

### Prepare data: Create post to user3
POST http://localhost:8082/api/posts/createPost
userId: {{user3Id}}
Content-Type: application/json

{
  "postType": "post",
  "content": "Bonjour je suis plus puissant que Java lui meme",
  "mediaPath": ""
}
> {%
    client.global.set("post1Id", response.body._id);
%}

### Prepare data: Create post to user4
POST http://localhost:8082/api/posts/createPost
userId: {{user4Id}}
Content-Type: application/json

{
  "postType": "post",
  "content": "C'est plus oui le plus puissant",
  "mediaPath": ""
}
> {%
    client.global.set("post2Id", response.body._id);
%}

### Prepare data: Create post to user5
POST http://localhost:8082/api/posts/createPost
userId: {{user4Id}}
Content-Type: application/json

{
  "postType": "post",
  "content": "Mange mon chibbre pelo",
  "mediaPath": ""
}
> {%
    client.global.set("post3Id", response.body._id);
%}

### 1. Follow: user3 follows user4
POST http://localhost:8084/api/social/follow
Content-Type: application/json

{
  "followUnfollow": true,
  "userFollowedId": "{{user4Id}}",
  "userFollowId": "{{user3Id}}"
}

### 2. Get Follows: Retrieve users followed by user3 (should return user4)
GET http://localhost:8084/api/social/getFollows/{{user3Id}}
Accept: application/json

### 3. Follow: user3 follows user5
POST http://localhost:8084/api/social/follow
Content-Type: application/json

{
  "followUnfollow": true,
  "userFollowedId": "{{user5Id}}",
  "userFollowId": "{{user3Id}}"
}

### 4. Get Follows: Retrieve users followed by user3 (should return user4 and user5)
GET http://localhost:8084/api/social/getFollows/{{user3Id}}
Accept: application/json

### 5. Get Followers: Retrieve users following user4 (should return user1)
GET http://localhost:8084/api/social/getFollowers/{{user4Id}}
Accept: application/json

### 6. Unfollow: user3 unfollows user4
POST http://localhost:8084/api/social/follow
Content-Type: application/json

{
  "followUnfollow": false,
  "userFollowedId": "{{user4Id}}",
  "userFollowId": "{{user3Id}}"
}

### 7. Get Follows: Retrieve users followed by user3 again (should return only user5)
GET http://localhost:8084/api/social/getFollows/{{user3Id}}
Accept: application/json

### 8. Block: user3 blocks user4
POST http://localhost:8084/api/social/block
Content-Type: application/json

{
  "blockUnblock": true,
  "userBlockedId": "{{user4Id}}",
  "userBlockId": "{{user3Id}}"
}

### 9. Get Blocks: Retrieve users blocked by user3 (should return user4)
GET http://localhost:8084/api/social/getBlocked/{{user3Id}}
Accept: application/json

### 10. Block: user3 blocks user5
POST http://localhost:8084/api/social/block
Content-Type: application/json

{
  "blockUnblock": true,
  "userBlockedId": "{{user5Id}}",
  "userBlockId": "{{user3Id}}"
}

### 11. Get Blocks: Retrieve users blocked by user3 (should return user4 and user5)
GET http://localhost:8084/api/social/getBlocked/{{user3Id}}
Accept: application/json

### 12. Get Blocks: Retrieve users blocking user4 (should return user1)
GET http://localhost:8084/api/social/getBlock/{{user4Id}}
Accept: application/json

### 13. Unblock: user3 unblocks user4
POST http://localhost:8084/api/social/block
Content-Type: application/json

{
  "blockUnblock": false,
  "userBlockedId": "{{user4Id}}",
  "userBlockId": "{{user3Id}}"
}

### 14. Get Blocks: Retrieve users blocked by user3 again (should return only user5)
GET http://localhost:8084/api/social/getBlocked/{{user3Id}}
Accept: application/json

### 15. Like: user3 like post1
POST http://localhost:8084/api/social/like
Content-Type: application/json

{
  "likeUnlike": true,
  "postId": "{{post1Id}}",
  "userId": "{{user3Id}}"
}

### 16. Get Likes: Retrieve posts liked by user3 (should return post1)
GET http://localhost:8084/api/social/getLikedPosts/{{user3Id}}
Accept: application/json

### 17. Likes: user3 likes post2
POST http://localhost:8084/api/social/like
Content-Type: application/json

{
  "likeUnlike": true,
  "postId": "{{post2Id}}",
  "userId": "{{user3Id}}"
}

### 18. Get Likes: Retrieve posts liked by user3 (should return post1 and post2)
GET http://localhost:8084/api/social/getLikedPosts/{{user3Id}}
Accept: application/json

### 19. Get Likes: Retrieve users who like post1 (should return user3)
GET http://localhost:8084/api/social/getLikeUsers/{{post1Id}}
Accept: application/json

### 20. Unlike: user3 unlikes post1
POST http://localhost:8084/api/social/like
Content-Type: application/json

{
  "liekUnlike": false,
  "postId": "{{post1Id}}",
  "userId": "{{user3Id}}"
}

### 21. Get Likes: Retrieve posts liked by user3 again (should return only post2)
GET http://localhost:8084/api/social/getLikedPosts/{{user3Id}}
Accept: application/json