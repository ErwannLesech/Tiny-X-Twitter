# ================== User Service ==================

### 1. Test Create User
POST http://localhost:8081/api/users/create
Content-Type: application/json

{
  "tag": "user1",
  "pseudo": "User One",
  "password": "password123",
  "blockedUsers": []
}

### 2. Test Authenticate User
POST http://localhost:8081/api/users/auth
Content-Type: application/json

{
  "tag": "user1",
  "pseudo": "User One",
  "password": "password123"
}

### 3. Test Get User by Tag
GET http://localhost:8081/api/users/getUser
userTag: user1

### 4. Test Update User
PATCH http://localhost:8081/api/users/update
Content-Type: application/json

{
  "tag": "user1",
  "pseudo": "User One Updated",
  "password": "newpassword123",
  "blockedUsers": []
}

### 5. Test Get User by Tag After Update
GET http://localhost:8081/api/users/getUser
userTag: user1

### 6. Test Delete User
DELETE http://localhost:8081/api/users/delete
userTag: user1

### 7. Test Get User After Delete
GET http://localhost:8081/api/users/getUser
userTag: user1

# ================== Repo Post Service ==================

### Prepare data
POST http://localhost:8081/api/users/create
Content-Type: application/json

{
  "tag": "user2",
  "pseudo": "User Two",
  "password": "password123",
  "blockedUsers": []
}

### Get userId
GET http://localhost:8081/api/users/getUser
userTag:user2

### 8. Test Create Post
POST http://localhost:8082/api/posts/createPost
userId:67dae40c9c38e63a0a5c5992
Content-Type: application/json

{
  "postType": "post",
  "content": "This is my first post!",
  "mediaPath": "https://cdn.example.com/image.jpg"
}

### 9. Test Get Posts by User (replace userId with _id)
GET http://localhost:8082/api/posts/getPosts
userId:67dae40c9c38e63a0a5c5992

### 10. Test Get Post by ID (replace end of url with _id)
GET http://localhost:8082/api/posts/getPost/67e4363af729df6e7fb465b0

### 11. Test Create Repost (replace parentId with _id)
POST http://localhost:8082/api/posts/createPost
userId:67dae40c9c38e63a0a5c5992
Content-Type: application/json

{
  "postType": "repost",
  "content": "This is my second Repost!",
  "parentId": "67e4363af729df6e7fb465b0"
}

### 12. Test Create Reply (replace parentId with _id)
POST http://localhost:8082/api/posts/createPost
userId:67dae40c9c38e63a0a5c5992
Content-Type: application/json

{
  "postType": "reply",
  "content": "This is my first Reply!",
  "parentId": "67e4363af729df6e7fb465b0"
}

### Get reply and post Ids
GET http://localhost:8082/api/posts/getPosts
userId:67dae40c9c38e63a0a5c5992

### 13. Test Get Reply (replace id with _id)
GET http://localhost:8082/api/posts/getPostReply/67de9fce9ead3b458fa2a7af

### 12. Test Delete Post by ID
DELETE http://localhost:8082/api/posts/deletePost/67dae580ecc276377f341e5a

### 13. Test Get Post by userId after delete
GET http://localhost:8082/api/posts/getPosts
userId:67dae40c9c38e63a0a5c5992

# ================== Search Service ==================

### üîç 1. Create Post with hashtags #dev #java
POST http://localhost:8082/api/posts/createPost
userId: 65fb387a206b9b57f5cbe7bb
Content-Type: application/json

{
  "postType": "post",
  "content": "Je parle de #dev et #java aujourd‚Äôhui !",
  "mediaPath": ""
}

### üîç 2. Create Post with regular words only
POST http://localhost:8082/api/posts/createPost
userId: 65fb387a206b9b57f5cbe7bb
Content-Type: application/json

{
  "postType": "post",
  "content": "Java Quarkus Elasticsearch sont puissants",
  "mediaPath": ""
}

### üîç 3. Create Post with unrelated content
POST http://localhost:8082/api/posts/createPost
userId: 65fb387a206b9b57f5cbe7bb
Content-Type: application/json

{
  "postType": "post",
  "content": "Rien √† voir ici",
  "mediaPath": ""
}

### üîç 4. Search vague match (regular words only)
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"java elasticsearch"

### üîç 5. Search strict match (hashtags only, #dev and #java required)
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"#dev #java"

### üîç 6. Search strict match (hashtags only with one hashtag that does not appear in the tweet)
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"#dev #java #snugus"

### üîç 7. Search mixed match (word + hashtag)
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"aujourd‚Äôhui #java"

### üö´ 8. Hashtag should not match as word
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"java"

### üö´ 9. Word should not match as hashtag
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"#elasticsearch"

### üóëÔ∏è 9. Delete post containing hashtags
# ‚ö†Ô∏è Remplacer l'ID par celui du post √† supprimer (r√©cup√©r√© via /getPosts)
DELETE http://localhost:8082/api/posts/deletePost/REPLACE_WITH_POST_ID

### üö´ 10. Re-search after delete
POST http://localhost:8083/api/search/searchPosts
Content-Type: application/json

"#java"